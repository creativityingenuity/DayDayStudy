冷启动引起的白屏/黑屏
点击你app那一刻到系统调用Activity.onCreate()之间的时间段。在这个时间段内，WindowManager会先加载app主题样式中的windowBackground作为app的预览元素，然后再真正去加载activity的layout布局

从Android 4.4（API 19）开始，Logcat自动帮我们打印出应用的启动时间。这个时间从应用启动（创建进程）开始计算，到完成视图的第一次绘制（即Activity内容对用户可见）为止
----------
我将冷启动优化分为可控阶段和不可控阶段
    不可控阶段
    点击app以后到初始化Application之间这段时间，系统接管，从Zygote进程中fork创建新进程，GC回收等等一系列操作，和我们app无关
    可控阶段
    初始化Application开始
整个冷启动流程中至少有两处onCreate，分别是Application和Activity，整个流程都是可控的。所以，onCreate方法做的事情越多，冷启动消耗的时间越长


ui.activity.SplashActivity: +1s971ms 256 234 214
ui.activity.SplashActivity: +179ms
1s735ms
577ms

优化方案（仅针对可控区范围）

    从启动流程分析

    减少两处onCreate()中的初始化操作，将部分初始化移动到IntentService中进行

    从用户体验分析

1.设置Splash页主题设置背景，解决白屏问题，这一步做了之后，对整体启动时间并没有任何的减少，时间不变，只是说给用户的体验要友好很多，不再显示一个突兀的白屏/黑屏界面
2.将Application和MainActivity的onCreate中可以提取的提到IntentService中
3.在MainActivity中将返回键响应修改为响应Home键，使用户按Back键时以为他退出了，以减少下次启动的不必要动作。moveTaskToBack(boolean）
 nonRoot=false→ 仅当activity为task根（即首个activity例如启动activity之类的）时才生效

nonRoot=true→ 忽略上面的限制
这个方法不会改变task中的activity中的顺序，效果基本等同于home键











--------------
x轴为调用的时间线，越宽的表示耗时越久，y轴为调用的深度，也就是调用的子方法。父类在最上面，很明显initBottomTab（）方法调用是最耗时的。

鼠标悬浮可以查看耗费时间，双击可以跳转到相应代码


橙色：系统方法
蓝色：第三方API（包括java语言的api）
绿色：App自身方法

作者：刘洋巴金
链接：https://juejin.cn/post/6844904150598156295
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


//不要写死线程池，那并不是最优解
// 设置线程池的核心线程数2-4之间,但是取决于CPU核数
private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));

如果两个异步之间执行的内容有着依赖关系
如果其中一个异步处理，需要先执行完毕自己，主线程才能继续往下执行，那么常规方式也不好处理


CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为倒数的门栓，似乎有一点“三二一，芝麻开门”的感觉。CountDownLatch的作用也是如此，在构造CountDownLatch的时候需要传入一个整数n，在这个整数“倒数”到0之前，主线程需要等待在门口，而这个“倒数”过程则是由各个执行线程驱动的，每个线程执行完一个任务“倒数”一次。总结来说，CountDownLatch的作用就是等待其他的线程都执行完任务，必要时可以对各个任务的执行结果进行汇总，然后主线程才继续往下执行。
CountDownLatch主要有两个方法：countDown()和await()。countDown()方法用于使计数器减一，其一般是执行任务的线程调用，await()方法则使调用该方法的线程处于等待状态，其一般是主线程调用。这里需要注意的是，countDown()方法并没有规定一个线程只能调用一次，当同一个线程调用多次countDown()方法时，每次都会使计数器减一；另外，await()方法也并没有规定只能有一个线程执行该方法，如果多个线程同时执行await()方法，那么这几个线程都将处于等待状态，并且以共享模式享有同一个锁

作者：charming_coder
链接：https://www.jianshu.com/p/128476015902
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
